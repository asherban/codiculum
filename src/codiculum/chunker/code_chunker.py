# Contains the main logic for chunking code based on Doxygen output.

from src.codiculum.doxygen_parser.models import CodeElement
from src.codiculum.chunker.models import Chunk


def format_element_to_chunk(element: CodeElement, source_snippet: str) -> Chunk:
    """
    Formats a parsed code element and its source snippet into a Chunk object.

    Args:
        element: The parsed CodeElement from Doxygen data.
        source_snippet: The corresponding source code snippet.

    Returns:
        A Chunk object populated with data from the element and snippet.

    Raises:
        ValueError: If the element's location information is missing.
    """
    if not element.location:
        # This shouldn't happen if the parser/retriever worked correctly, but good practice.
        raise ValueError(f"Cannot create chunk for element '{element.id}' without location info.")

    return Chunk(
        filename=element.location.file,
        start_line=element.location.start_line or 0, # Use 0 if None
        end_line=element.location.end_line or 0,     # Use 0 if None
        code_snippet=source_snippet,
        brief_description=element.brief_description,
        detailed_description=element.detailed_description,
        # ID, kind, name could go into metadata if the Chunk model is updated
        # or be part of the formatted text generated by Chunk.format_chunk_text() later.
    )


# def chunk_code(): # Placeholder - keep for now
#     pass 